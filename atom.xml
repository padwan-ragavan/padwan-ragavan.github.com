<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[gitblog]]></title>
  <link href="http://padwan-ragavan.github.com/atom.xml" rel="self"/>
  <link href="http://padwan-ragavan.github.com/"/>
  <updated>2013-06-22T09:44:31+05:30</updated>
  <id>http://padwan-ragavan.github.com/</id>
  <author>
    <name><![CDATA[Ragavan Govindarajan]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Nbuilder disable property naming for all fields with given Name]]></title>
    <link href="http://padwan-ragavan.github.com/blog/2013/06/21/nbuilder-disable-property-naming-for-all-fields-with-given-name/"/>
    <updated>2013-06-21T20:39:00+05:30</updated>
    <id>http://padwan-ragavan.github.com/blog/2013/06/21/nbuilder-disable-property-naming-for-all-fields-with-given-name</id>
    <content type="html"><![CDATA[<p><a href="http://nbuilder.org/" title="NBuilder">NBuilder</a> is fluent objects builder, generates values for properties/fields in the object automatically. This also to persist the created object using the <code>.Persist()</code>.
Citing the example from <a href="http://nbuilder.org/Documentation/Persistence">NBuilder Persistence</a></p>

<figure class='code'><figcaption><span>Persistence  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='csharp'><span class='line'>   <span class="c1">// in config section</span>
</span><span class='line'>  <span class="n">BuilderSetup</span><span class="p">.</span><span class="n">SetCreatePersistenceMethod</span><span class="p">&lt;</span><span class="n">Product</span><span class="p">&gt;(</span><span class="n">productRepository</span><span class="p">.</span><span class="n">Create</span><span class="p">);</span>
</span><span class='line'>  <span class="c1">// in test code</span>
</span><span class='line'>  <span class="n">Builder</span><span class="p">&lt;</span><span class="n">Product</span><span class="p">&gt;.</span><span class="n">CreateNew</span><span class="p">().</span><span class="n">Persist</span><span class="p">();</span>
</span></code></pre></td></tr></table></div></figure>


<p>If NHibernate is being used for persistence and identity insert is off, the NBuilder needs to be told to not generate values for <code>Id</code>. This can be done like <code>BuilderSetup.DisablePropertyNamingFor&lt;Product, int&gt;(x =&gt; x.Id);</code></p>

<p>However this needs to be done for all the domain classes, and its not straight forward as current way of disabling property naming is only through generic method.</p>

<p>To disable property naming for a property of given name, the following snippet can be used</p>

<figure class='code'><figcaption><span>Disable naming for all fields with given name  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='csharp'><span class='line'>   <span class="k">typeof</span><span class="p">(</span><span class="n">Product</span><span class="p">).</span><span class="n">Assembly</span><span class="p">.</span><span class="n">GetTypes</span><span class="p">().</span><span class="n">Where</span><span class="p">(</span><span class="n">HasId</span><span class="p">).</span><span class="n">ForEach</span><span class="p">(</span><span class="n">t</span> <span class="p">=&gt;</span>
</span><span class='line'>                <span class="p">{</span>
</span><span class='line'>                    <span class="kt">var</span> <span class="n">methodInfo</span> <span class="p">=</span> <span class="k">typeof</span><span class="p">(</span><span class="n">BuilderSetup</span><span class="p">).</span><span class="n">GetMethod</span><span class="p">(</span><span class="s">&quot;DisablePropertyNamingFor&quot;</span><span class="p">);</span>
</span><span class='line'>                    <span class="kt">var</span> <span class="n">idType</span> <span class="p">=</span> <span class="n">t</span><span class="p">.</span><span class="n">GetProperty</span><span class="p">(</span><span class="s">&quot;Id&quot;</span><span class="p">).</span><span class="n">PropertyType</span><span class="p">;</span>
</span><span class='line'>                    <span class="kt">var</span> <span class="n">disablePropertyNaming</span> <span class="p">=</span> <span class="n">methodInfo</span><span class="p">.</span><span class="n">MakeGenericMethod</span><span class="p">(</span><span class="n">t</span><span class="p">,</span> <span class="n">idType</span><span class="p">);</span>
</span><span class='line'>                    <span class="kt">var</span> <span class="n">parameterExpression</span> <span class="p">=</span> <span class="n">Expression</span><span class="p">.</span><span class="n">Parameter</span><span class="p">(</span><span class="n">t</span><span class="p">,</span> <span class="s">&quot;t&quot;</span><span class="p">);</span>
</span><span class='line'>                    <span class="kt">var</span> <span class="n">makeMemberAccess</span> <span class="p">=</span> <span class="n">Expression</span><span class="p">.</span><span class="n">MakeMemberAccess</span><span class="p">(</span><span class="n">parameterExpression</span><span class="p">,</span> <span class="n">t</span><span class="p">.</span><span class="n">GetProperty</span><span class="p">(</span><span class="s">&quot;Id&quot;</span><span class="p">));</span>
</span><span class='line'>                    <span class="kt">var</span> <span class="n">memberAccessExpression</span> <span class="p">=</span> <span class="n">Expression</span><span class="p">.</span><span class="n">Lambda</span><span class="p">(</span><span class="n">makeMemberAccess</span><span class="p">,</span> <span class="n">parameterExpression</span><span class="p">);</span>
</span><span class='line'>                    <span class="n">disablePropertyNaming</span><span class="p">.</span><span class="n">Invoke</span><span class="p">(</span><span class="k">null</span><span class="p">,</span> <span class="k">new</span> <span class="kt">object</span><span class="p">[]</span> <span class="p">{</span> <span class="n">memberAccessExpression</span> <span class="p">});</span>
</span><span class='line'>                <span class="p">})</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>    <span class="k">private</span> <span class="k">static</span> <span class="kt">bool</span> <span class="nf">HasId</span><span class="p">(</span><span class="n">Type</span> <span class="n">t</span><span class="p">)</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">t</span><span class="p">.</span><span class="n">Namespace</span> <span class="p">!=</span> <span class="k">null</span> <span class="p">&amp;&amp;</span> <span class="n">t</span><span class="p">.</span><span class="n">Namespace</span><span class="p">.</span><span class="n">Contains</span><span class="p">(</span><span class="s">&quot;Model&quot;</span><span class="p">)</span> <span class="p">&amp;&amp;</span> <span class="n">t</span><span class="p">.</span><span class="n">GetProperty</span><span class="p">(</span><span class="s">&quot;Id&quot;</span><span class="p">)</span> <span class="p">!=</span> <span class="k">null</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>This snippet invokes <code>BuilderSetup.DisablePropertyNamingFor</code> with <code>x=&gt;x.Id</code> being passed in as a lambda expression doing MemberAccess for all classes in the assembly which has an Id.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Linq To Sql for Custom Methods/Properties - LinqExtensionMethods]]></title>
    <link href="http://padwan-ragavan.github.com/blog/2013/05/31/linq-to-sql-for-custom-methods-LinqExtensionMethods/"/>
    <updated>2013-05-31T20:47:00+05:30</updated>
    <id>http://padwan-ragavan.github.com/blog/2013/05/31/linq-to-sql-for-custom-methods-LinqExtensionMethods</id>
    <content type="html"><![CDATA[<p>If we have a domain like Item below,</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='csharp'><span class='line'>    <span class="k">public</span> <span class="k">class</span> <span class="nc">Item</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="k">public</span> <span class="k">virtual</span> <span class="kt">int</span> <span class="n">Id</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>
</span><span class='line'>        <span class="k">public</span> <span class="k">virtual</span> <span class="kt">string</span> <span class="n">Source</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>
</span><span class='line'>        <span class="k">public</span> <span class="k">virtual</span> <span class="kt">string</span> <span class="n">Dest</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>
</span><span class='line'>        <span class="k">public</span> <span class="k">virtual</span> <span class="kt">bool</span> <span class="n">IsExport</span> <span class="p">{</span> <span class="k">get</span> <span class="p">{</span> <span class="k">return</span> <span class="n">Source</span> <span class="p">!=</span> <span class="n">Dest</span><span class="p">;</span> <span class="p">}</span> <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>it would be good if we can write a linq query like <code>session.Query&lt;Item&gt;().Where(i =&gt; i.IsExport).ToList()</code>,
however we cant as linq to sql doesnt know how to generate sql for IsExport.</p>

<p>To help linq generate sql for our custom properties we can write our own ILinqToHqlGeneratorsRegistry, something like the one below, which is a generic one and works not just for one property but more.</p>

<p>The idea is to expose the the logic in property as expression which can be used to generate sql.</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
</pre></td><td class='code'><pre><code class='csharp'><span class='line'>    <span class="k">public</span> <span class="k">class</span> <span class="nc">Item</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="k">public</span> <span class="k">static</span> <span class="k">readonly</span> <span class="n">Expression</span><span class="p">&lt;</span><span class="n">Func</span><span class="p">&lt;</span><span class="n">Item</span><span class="p">,</span> <span class="kt">bool</span><span class="p">&gt;&gt;</span> <span class="n">IsExportExpression</span> <span class="p">=</span> <span class="n">o</span> <span class="p">=&gt;</span> <span class="n">o</span><span class="p">.</span><span class="n">Source</span> <span class="p">!=</span> <span class="n">o</span><span class="p">.</span><span class="n">Dest</span><span class="p">;</span>
</span><span class='line'>        <span class="k">public</span> <span class="k">virtual</span> <span class="kt">int</span> <span class="n">Id</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>
</span><span class='line'>        <span class="k">public</span> <span class="k">virtual</span> <span class="kt">string</span> <span class="n">Source</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>
</span><span class='line'>        <span class="k">public</span> <span class="k">virtual</span> <span class="kt">string</span> <span class="n">Dest</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>
</span><span class='line'>        <span class="k">public</span> <span class="k">virtual</span> <span class="kt">bool</span> <span class="n">IsExport</span> <span class="p">{</span> <span class="k">get</span> <span class="p">{</span> <span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="n">FromExpression</span><span class="p">(</span><span class="n">IsExportExpression</span><span class="p">);</span> <span class="p">}</span> <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">public</span> <span class="k">static</span> <span class="k">class</span> <span class="nc">ExpressionExtensions</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="k">public</span> <span class="k">static</span> <span class="n">TReturn</span> <span class="n">FromExpression</span><span class="p">&lt;</span><span class="n">T</span><span class="p">,</span> <span class="n">TReturn</span><span class="p">&gt;(</span><span class="k">this</span> <span class="n">T</span> <span class="n">o</span><span class="p">,</span> <span class="n">Expression</span><span class="p">&lt;</span><span class="n">Func</span><span class="p">&lt;</span><span class="n">T</span><span class="p">,</span> <span class="n">TReturn</span><span class="p">&gt;&gt;</span> <span class="n">selector</span><span class="p">)</span>
</span><span class='line'>        <span class="p">{</span>
</span><span class='line'>            <span class="k">return</span> <span class="n">selector</span> <span class="p">==</span> <span class="k">null</span> <span class="p">?</span> <span class="k">default</span><span class="p">(</span><span class="n">TReturn</span><span class="p">)</span> <span class="p">:</span> <span class="n">selector</span><span class="p">.</span><span class="n">Compile</span><span class="p">()(</span><span class="n">o</span><span class="p">);</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">public</span> <span class="k">class</span> <span class="nc">LinqToHqlGenerationRegistry</span> <span class="p">:</span> <span class="n">DefaultLinqToHqlGeneratorsRegistry</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="k">public</span> <span class="nf">LinqToHqlGenerationRegistry</span><span class="p">():</span><span class="k">base</span><span class="p">()</span>
</span><span class='line'>        <span class="p">{</span>
</span><span class='line'>            <span class="n">RegisterGenerator</span><span class="p">(</span><span class="n">ReflectionHelper</span><span class="p">.</span><span class="n">GetMethodDefinition</span><span class="p">(()=&gt;</span><span class="n">ExpressionExtensions</span><span class="p">.</span><span class="n">FromExpression</span><span class="p">&lt;</span><span class="kt">object</span><span class="p">,</span><span class="kt">object</span><span class="p">&gt;(</span><span class="k">null</span><span class="p">,</span><span class="k">null</span><span class="p">)),</span> <span class="k">new</span> <span class="n">HqlFromExpressionGenerator</span><span class="p">());</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">class</span> <span class="nc">HqlFromExpressionGenerator</span> <span class="p">:</span> <span class="n">BaseHqlGeneratorForMethod</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="k">public</span> <span class="nf">HqlFromExpressionGenerator</span><span class="p">()</span>
</span><span class='line'>        <span class="p">{</span>
</span><span class='line'>            <span class="n">SupportedMethods</span> <span class="p">=</span> <span class="k">new</span><span class="p">[]</span>
</span><span class='line'>                <span class="p">{</span>
</span><span class='line'>                    <span class="n">ReflectionHelper</span><span class="p">.</span><span class="n">GetMethodDefinition</span><span class="p">((()</span> <span class="p">=&gt;</span> <span class="n">ExpressionProjectionExtensions</span><span class="p">.</span><span class="n">FromExpression</span><span class="p">&lt;</span><span class="kt">object</span><span class="p">,</span> <span class="kt">object</span><span class="p">&gt;(</span><span class="k">null</span><span class="p">,</span> <span class="k">null</span><span class="p">)))</span>
</span><span class='line'>                <span class="p">};</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">public</span> <span class="k">override</span> <span class="n">HqlTreeNode</span> <span class="nf">BuildHql</span><span class="p">(</span><span class="n">MethodInfo</span> <span class="n">method</span><span class="p">,</span> <span class="n">Expression</span> <span class="n">targetObject</span><span class="p">,</span> <span class="n">ReadOnlyCollection</span><span class="p">&lt;</span><span class="n">Expression</span><span class="p">&gt;</span> <span class="n">arguments</span><span class="p">,</span>
</span><span class='line'>                                             <span class="n">HqlTreeBuilder</span> <span class="n">treeBuilder</span><span class="p">,</span> <span class="n">IHqlExpressionVisitor</span> <span class="n">visitor</span><span class="p">)</span>
</span><span class='line'>        <span class="p">{</span>
</span><span class='line'>            <span class="kt">var</span> <span class="n">expression</span> <span class="p">=</span> <span class="n">arguments</span><span class="p">[</span><span class="m">1</span><span class="p">]</span> <span class="k">as</span> <span class="n">UnaryExpression</span><span class="p">;</span>
</span><span class='line'>            <span class="kt">dynamic</span> <span class="n">operand</span> <span class="p">=</span> <span class="n">expression</span><span class="p">.</span><span class="n">Operand</span><span class="p">;</span>
</span><span class='line'>            <span class="kt">var</span> <span class="n">replace</span> <span class="p">=</span> <span class="n">ReplacingExpressionTreeVisitor</span><span class="p">.</span><span class="n">Replace</span><span class="p">(</span><span class="n">operand</span><span class="p">.</span><span class="n">Parameters</span><span class="p">[</span><span class="m">0</span><span class="p">],</span> <span class="n">arguments</span><span class="p">[</span><span class="m">0</span><span class="p">],</span> <span class="n">operand</span><span class="p">.</span><span class="n">Body</span><span class="p">);</span>
</span><span class='line'>            <span class="k">return</span> <span class="n">visitor</span><span class="p">.</span><span class="n">Visit</span><span class="p">(</span><span class="n">replace</span><span class="p">);</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>we have to add <code>LinqToHqlGenerationRegistry</code> to NHibernate using</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>Fluently
</span><span class='line'>.Configure(yourConfig)
</span><span class='line'>.ExposeConfiguration(config=&gt;config.LinqToHqlGeneratorsRegistry&lt;LinqToHqlGenerationRegistry&gt;());</span></code></pre></td></tr></table></div></figure>


<p>now when we want to query Item we can do</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>session.Query&lt;Item&gt;().Where(i =&gt; i.FromExpression(Item.IsExportExpression)).ToList()</span></code></pre></td></tr></table></div></figure>


<p>Properties can now share expessions between them.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[css at the end of page delays page rendering]]></title>
    <link href="http://padwan-ragavan.github.com/blog/2013/05/22/css-at-the-end-of-page-delays-page-rendering/"/>
    <updated>2013-05-22T00:29:00+05:30</updated>
    <id>http://padwan-ragavan.github.com/blog/2013/05/22/css-at-the-end-of-page-delays-page-rendering</id>
    <content type="html"><![CDATA[

<figure class='code'><figcaption><span>css_at_the_end  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;html&gt;</span>
</span><span class='line'><span class="nt">&lt;head&gt;&lt;title&gt;</span>css at the end<span class="nt">&lt;/title&gt;</span> <span class="nt">&lt;/head&gt;</span>
</span><span class='line'><span class="nt">&lt;body&gt;</span>
</span><span class='line'><span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">&quot;class&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>  Lorem ipsum dolor sit amet, consectetuer adipiscing elit,
</span><span class='line'><span class="nt">&lt;/div&gt;</span>
</span><span class='line'><span class="nt">&lt;b&gt;</span> more elements ... <span class="nt">&lt;/b&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nt">&lt;link</span> <span class="na">rel=</span><span class="s">&quot;stylesheet&quot;</span> <span class="na">type=</span><span class="s">&quot;text/css&quot;</span> <span class="na">href=</span><span class="s">&quot;app.css&quot;</span><span class="nt">&gt;</span>
</span><span class='line'><span class="nt">&lt;/body&gt;</span>
</span><span class='line'><span class="nt">&lt;/html&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>would take more time to load than</p>

<figure class='code'><figcaption><span>css_in_the_head  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;html&gt;</span>
</span><span class='line'><span class="nt">&lt;head&gt;</span>
</span><span class='line'>  <span class="nt">&lt;title&gt;</span>css_in_the_head<span class="nt">&lt;/title&gt;</span>
</span><span class='line'>  <span class="nt">&lt;link</span> <span class="na">rel=</span><span class="s">&quot;stylesheet&quot;</span> <span class="na">type=</span><span class="s">&quot;text/css&quot;</span> <span class="na">href=</span><span class="s">&quot;app.css&quot;</span><span class="nt">&gt;</span>
</span><span class='line'><span class="nt">&lt;/head&gt;</span>
</span><span class='line'><span class="nt">&lt;body&gt;</span>
</span><span class='line'><span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">&quot;class&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>  Lorem ipsum dolor sit amet, consectetuer adipiscing elit,
</span><span class='line'><span class="nt">&lt;/div&gt;</span>
</span><span class='line'><span class="nt">&lt;b&gt;</span> more elements ... <span class="nt">&lt;/b&gt;</span>
</span><span class='line'><span class="nt">&lt;/body&gt;</span>
</span><span class='line'><span class="nt">&lt;/html&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>as the browser has to repaint/rerender the elements with the css rules from <code>app.css</code> when placed at the end of doc.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[fix for rake generate with sytax highlight code block - fail with block in ffi_lib: Could not open library .dll]]></title>
    <link href="http://padwan-ragavan.github.com/blog/2012/12/26/fix-for-rake-generate-fail-with-block-in-ffi-lib-could-not-open-library-dll/"/>
    <updated>2012-12-26T01:17:00+05:30</updated>
    <id>http://padwan-ragavan.github.com/blog/2012/12/26/fix-for-rake-generate-fail-with-block-in-ffi-lib-could-not-open-library-dll</id>
    <content type="html"><![CDATA[<p>When <code>rake generate</code> fails with</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>block in ffi_lib: Could not open library .dll</span></code></pre></td></tr></table></div></figure>


<p></p>

<p>for me it was because the rubypython was looking for python27.dll in <code>{instal.dir}\Python27\libs\python27.dll</code> and it was not there. This can be fixed by copying the <code>python27.dll</code> from <code>C:\Windows\System32\python27.dll</code> if yours is a 32-bit or from <code>C:\Windows\SysWOW64\python27.dll</code> if 64-bit.</p>

<p>got to know about the missing dll from <a href="http://hussion.me/blog/2012/04/29/octopress2/">Hussion&#8217;s Blog</a>, but mine was 64-bit and ofcourse copying from system32 didnt solve the issue.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[filepicker for mozilla addon]]></title>
    <link href="http://padwan-ragavan.github.com/blog/2012/12/25/filepicker-mozilla-addon/"/>
    <updated>2012-12-25T23:06:00+05:30</updated>
    <id>http://padwan-ragavan.github.com/blog/2012/12/25/filepicker-mozilla-addon</id>
    <content type="html"><![CDATA[<p>If your develpoing a mozilla addon, and want a file picker you can use the filePicker module. It uses component interface. You can find more info
<a href="https://developer.mozilla.org/en-US/docs/XPCOM_Interface_Reference/nsIFilePicker">nsIFilePicker</a>.</p>

<figure class='code'><figcaption><span>filePicker </span><a href='https://github.com/padwan-ragavan/omnisequences/blob/master/lib/filePicker.js'>filePicker.js </a></figcaption> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kr">const</span> <span class="p">{</span><span class="nx">Cc</span><span class="p">,</span><span class="nx">Ci</span><span class="p">}</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s2">&quot;chrome&quot;</span><span class="p">);</span>
</span><span class='line'><span class="kr">const</span> <span class="nx">windowUtils</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s2">&quot;window-utils&quot;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="kd">var</span> <span class="nx">getExportFileName</span> <span class="o">=</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">filePicker</span> <span class="o">=</span> <span class="nx">Cc</span><span class="p">[</span><span class="s1">&#39;@mozilla.org/filepicker;1&#39;</span><span class="p">]</span>
</span><span class='line'>        <span class="p">.</span><span class="nx">createInstance</span><span class="p">(</span><span class="nx">Ci</span><span class="p">.</span><span class="nx">nsIFilePicker</span><span class="p">);</span>
</span><span class='line'>    <span class="nx">filePicker</span><span class="p">.</span><span class="nx">init</span><span class="p">(</span><span class="nx">windowUtils</span><span class="p">.</span><span class="nx">activeBrowserWindow</span><span class="p">,</span> <span class="s2">&quot;Export Omnisequences&quot;</span><span class="p">,</span> <span class="nx">Ci</span><span class="p">.</span><span class="nx">nsIFilePicker</span><span class="p">.</span><span class="nx">modeSave</span><span class="p">);</span>
</span><span class='line'>    <span class="nx">filePicker</span><span class="p">.</span><span class="nx">appendFilter</span><span class="p">(</span><span class="s2">&quot;*.json&quot;</span><span class="p">,</span> <span class="s2">&quot;*.json&quot;</span><span class="p">);</span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">show</span> <span class="o">=</span> <span class="nx">filePicker</span><span class="p">.</span><span class="nx">show</span><span class="p">();</span>
</span><span class='line'>    <span class="k">if</span><span class="p">(</span><span class="nx">show</span> <span class="o">!=</span> <span class="nx">Ci</span><span class="p">.</span><span class="nx">nsIFilePicker</span><span class="p">.</span><span class="nx">returnCancel</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="kd">var</span> <span class="nx">fileName</span> <span class="o">=</span> <span class="nx">filePicker</span><span class="p">.</span><span class="nx">file</span><span class="p">.</span><span class="nx">persistentDescriptor</span><span class="p">;</span>
</span><span class='line'>        <span class="k">if</span><span class="p">(</span><span class="sr">/.json$/</span><span class="p">.</span><span class="nx">test</span><span class="p">(</span><span class="nx">fileName</span><span class="p">))</span> <span class="p">{</span>
</span><span class='line'>            <span class="k">return</span> <span class="nx">fileName</span><span class="p">;</span>
</span><span class='line'>        <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>            <span class="k">return</span> <span class="nx">fileName</span> <span class="o">+</span> <span class="s2">&quot;.json&quot;</span><span class="p">;</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="k">return</span> <span class="kc">null</span><span class="p">;</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'>
</span><span class='line'><span class="kd">var</span> <span class="nx">getImportFileName</span> <span class="o">=</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">filePicker</span> <span class="o">=</span> <span class="nx">Cc</span><span class="p">[</span><span class="s1">&#39;@mozilla.org/filepicker;1&#39;</span><span class="p">]</span>
</span><span class='line'>        <span class="p">.</span><span class="nx">createInstance</span><span class="p">(</span><span class="nx">Ci</span><span class="p">.</span><span class="nx">nsIFilePicker</span><span class="p">);</span>
</span><span class='line'>    <span class="nx">filePicker</span><span class="p">.</span><span class="nx">init</span><span class="p">(</span><span class="nx">windowUtils</span><span class="p">.</span><span class="nx">activeBrowserWindow</span><span class="p">,</span> <span class="s2">&quot;Export Omnisequences&quot;</span><span class="p">,</span> <span class="nx">Ci</span><span class="p">.</span><span class="nx">nsIFilePicker</span><span class="p">.</span><span class="nx">modeOpen</span><span class="p">);</span>
</span><span class='line'>    <span class="nx">filePicker</span><span class="p">.</span><span class="nx">appendFilter</span><span class="p">(</span><span class="s2">&quot;*.json&quot;</span><span class="p">,</span> <span class="s2">&quot;*.json&quot;</span><span class="p">);</span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">show</span> <span class="o">=</span> <span class="nx">filePicker</span><span class="p">.</span><span class="nx">show</span><span class="p">();</span>
</span><span class='line'>    <span class="k">if</span><span class="p">(</span><span class="nx">show</span> <span class="o">!=</span> <span class="nx">Ci</span><span class="p">.</span><span class="nx">nsIFilePicker</span><span class="p">.</span><span class="nx">returnCancel</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="nx">filePicker</span><span class="p">.</span><span class="nx">file</span><span class="p">.</span><span class="nx">persistentDescriptor</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="k">return</span> <span class="kc">null</span><span class="p">;</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'>
</span><span class='line'><span class="nx">exports</span><span class="p">.</span><span class="nx">getExportFileName</span> <span class="o">=</span> <span class="nx">getExportFileName</span><span class="p">;</span>
</span><span class='line'><span class="nx">exports</span><span class="p">.</span><span class="nx">getImportFileName</span> <span class="o">=</span> <span class="nx">getImportFileName</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
</feed>
